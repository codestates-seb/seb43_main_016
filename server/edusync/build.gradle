plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"    // .adoc 파일 확장자를 가지는 AsciiDoc 문서를 생성해주는 Asciidoctor를 사용하기 위한 플러그인 추가
	id 'war'
}

ext { // API 문서 스니핏이 생성될 경로를 지정
	set('snippetsDir', file("build/generated-snippets"))
}

group = 'com.seb33'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // spring-restdocs-core와 spring-restdocs-mockmvc 의존 라이브러리 추가
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor' // asciidoctorExtensions 그룹에  spring-restdocs-asciidoctor 의존 라이브러리를 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.springframework.boot:spring-boot-starter-validation' // 유효성검사용 라이브러리 추가

	implementation 'org.mapstruct:mapstruct:1.5.2.Final' // mapstruct
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	implementation 'org.springframework.boot:spring-boot-starter-mail' // 이메일 전송용

	implementation 'org.springframework.boot:spring-boot-starter-data-redis' // RTK관리를 위한 redis

	implementation 'com.google.code.gson:gson' // (dto를) json으로 쉽게 바꿔주는 util 라이브러리

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5' // JWT 기능을 위한 jjwt 라이브러리
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.jsoup:jsoup:1.14.2'

	implementation 'org.flywaydb:flyway-mysql' // flyway mysql 의존성 추가
	implementation 'org.flywaydb:flyway-core' // flyway 의존성 추가
}

tasks.named('test') {
//	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') { // :asciidoctor task 실행 시
	configurations "asciidoctorExtensions" // Asciidoctor 기능을 사용하기 위해 :asciidoctor task에 asciidoctorExtensions 을 설정
	inputs.dir snippetsDir
	dependsOn test
}

// :build 실행 전에 실행되는 task
task copyDocument(type: Copy) {
	dependsOn asciidoctor            // [:asciidoctor]가 실행된 후에 task가 실행 되도록 의존성을 설정
	from file("${asciidoctor.outputDir}")   //  "build/docs/asciidoc/" 경로에 생성되는 index.html을 copy
	into file("src/main/resources/static/docs")   // 괄호안 경로에 복사한 index.html을 추가
}

build {
	dependsOn copyDocument  // :build task가 실행되기 전에 :copyDocument task가 먼저 수행 되도록 의존성 설정
}

// 애플리케이션 실행 파일이 생성하는 :bootJar task 설정
bootJar {
	archiveFileName = 'app.jar' // 애플리케이션 이름 짧게 만들기
	dependsOn copyDocument    // :bootJar task 실행 전에 :copyDocument task가 실행 되도록 의존성을 설정
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'     // Asciidoctor 실행으로 생성되는 index.html 파일을 jar 파일 안에 추가
	} // jar 파일에 index.html을 추가해 줌으로써 웹 브라우저에서 접속(http://localhost:8080/docs/index.html) 후, API 문서를 확인할 수 있게 된다.
}
